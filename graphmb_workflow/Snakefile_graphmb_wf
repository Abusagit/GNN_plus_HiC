from pathlib import Path
import os

#configurations
FASTA_ASSEMBLY = config.get("fasta")
ASSEMBLY_GRAPH = config.get("assembly_graph")
CONTIG_DEPTHS = config.get("depths_file")
CONTACT_MAP = config.get("contact_map")
NUM_CORES = int(config.get("cores", "32"))

checkm_output_root = config.get("checkm_output_root", "checm_results/")
binner_output_root = config.get("binner_output_root", "outputs/")

AGGREGATION_K_NEIGHBORS = config.get("aggregation_neighbors")
AGGREGATION_NUM_ITERATIONS = config.get("aggregation_iterations")
AGGREGATION_MODE = config.get("aggregation_mode")

CONTIG_MINLEN = config.get("contig_minlen", "2000")
BIN_MINLEN = config.get("bin_minlen", "500000")

AGGREGATION_MODE = AGGREGATION_MODE or "None"

binner_postfix = config.get("postfix_name", "")
binner_postfix = binner_postfix or ""

if AGGREGATION_MODE != "None":
    vamb_outdir = "vamb_aggregated_{}_neighbors_{}_iters_{}".format(AGGREGATION_K_NEIGHBORS, AGGREGATION_NUM_ITERATIONS, AGGREGATION_MODE)
else:
    vamb_outdir = "vamb"

vamb_outdir += binner_postfix

reduced_embeddings_output_1 = vamb_outdir + "_embs_reduced.tsv"
reduced_embeddings_output_2 = "graphmb_" + vamb_outdir + "__best_embs_reduced.tsv"


graphmb_outdir = "graphmb_" + vamb_outdir


VAMB_BINNER_OUT = os.path.join(binner_output_root, vamb_outdir)
GRAPHMB_BINNER_OUT = os.path.join(binner_output_root, graphmb_outdir)

CHECKM_VAMB_OUT = os.path.join(checkm_output_root, vamb_outdir)
CHECKM_GRAPHMB_OUT = os.path.join(checkm_output_root, graphmb_outdir)


print(binner_output_root + '_' + reduced_embeddings_output_1)
print(binner_output_root + '_' + reduced_embeddings_output_2)

rule all:
    input:
        dirs_checkm = expand("{binner}/storage/bin_stats_ext.tsv", binner=[CHECKM_GRAPHMB_OUT, CHECKM_VAMB_OUT]),
        reduced_embs_vamb = binner_output_root + '_' + reduced_embeddings_output_1,
        reduced_embs_graphmb = binner_output_root + '_' + reduced_embeddings_output_2

rule vamb:
    input:
        fasta = FASTA_ASSEMBLY,
        jgi = CONTIG_DEPTHS,
        contact_map = CONTACT_MAP
    output:
        clusters = os.path.join(VAMB_BINNER_OUT, "clusters.tsv"),
        embeddings = os.path.join(VAMB_BINNER_OUT, "embs.tsv"),
        dir = directory(os.path.join(VAMB_BINNER_OUT, "bins"))
    threads: 
        NUM_CORES
    conda:
        "ml"
    shell:
        "rm -rf {VAMB_BINNER_OUT};" # crashes with error if this line is not printed (mb because outdir is being created somewhere before implicitly)
        "vamb -p {threads} --outdir {VAMB_BINNER_OUT} -m {CONTIG_MINLEN} --minfasta {BIN_MINLEN} -k {AGGREGATION_K_NEIGHBORS} --aggregation_runs {AGGREGATION_NUM_ITERATIONS} --option {AGGREGATION_MODE} --jgi {input.jgi} --fasta {input.fasta} --contact_map {input.contact_map};"

rule graphmb:
    input:
        features = rules.vamb.output.embeddings,
        graph = ASSEMBLY_GRAPH,
        jgi = CONTIG_DEPTHS,
        fasta = FASTA_ASSEMBLY
    output:
        clusters = os.path.join(GRAPHMB_BINNER_OUT, "_best_contig2bin.tsv"),
        embeddings = os.path.join(GRAPHMB_BINNER_OUT, "_best_embs.pickle"),
        dir = directory(os.path.join(GRAPHMB_BINNER_OUT, "_bins"))
    threads:
        NUM_CORES
    conda:
        "ml"
    shell:
        "graphmb --features {input.features} --numcores {threads} --assembly_name {input.fasta} --graph_file {input.graph} --depth {input.jgi} --outdir {GRAPHMB_BINNER_OUT} --minbin {BIN_MINLEN} --mincontig {CONTIG_MINLEN}"

rule checkm:
    input:
        vamb_bins = rules.vamb.output.dir,
        graphmb_bins = rules.graphmb.output.dir
    output:
        rules.all.input.dirs_checkm
    threads:
        NUM_CORES
    conda:
        "checkm"
    shell:
        "source ~/miniconda3/etc/profile.d/conda.sh;"
        "conda activate checkm;"
        "checkm lineage_wf --reduced_tree -x fa --threads {threads} --pplacer_threads {threads} {input.graphmb_bins} {CHECKM_GRAPHMB_OUT};"
        "checkm lineage_wf --reduced_tree -x fna --threads {threads} --pplacer_threads {threads} {input.vamb_bins} {CHECKM_VAMB_OUT}"

rule tSNE:
    input:
        rules.vamb.output.embeddings,
        rules.graphmb.output.embeddings
    output:
        rules.all.input.reduced_embs_vamb,
        rules.all.input.reduced_embs_graphmb
    threads:
        NUM_CORES
    conda:
        "ml"
    shell:
        "python3 ~/tools/GNN_plus_HiC/reduce_embeddings.py -i {input} -d 3 -p {threads}"